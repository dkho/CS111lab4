# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Daniel Kho
Student ID: 204315203
Email: daniel.j.kho@gmail.com

# Partner 2 (if you're working in a team)
Name: Fan Hung
Student ID: 
Email: 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We implemented a forking system so that whenever the peer tried to download a file,
we would fork the download into a separate process. The parent would then close its copy 
of the file descriptor and increment the process count by one. If the process count hit
some maximum number, it'll wait for a child to exit before forking again. The same was 
done for uploads.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

	In task_upload, we changed the number of bytes to scan for when retrieving the filename
to match FILENAMESIZ plus a few bytes for the rest of the request. Previously, the request could
theoretically occupy 4096 bytes in the task buffer, but the filename can only be 256 bytes long.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

	We now check name of the file requested for a "/" in the start, and any instance of "../". 
We left the ability to have "/"'s through the rest of the name. While this leaves the ability
to access the user's files of other directories if there are soft links, it allows for 
subdirectories.
	We added timeouts to our sockets, and a maximum file size to protect against endless files and
empty sockets. We also added a "-f" command line option to force a download for a known long file.
	We changed the implementation of start_download, to protect against the case when the
tracker sends us a longer list of peers than can fit in the task buffer. Instead of calling
read_tracker_response, we call a function that we added, read_peer_list, which is another version
of read_tracker_response that reads peers into a dynamically allocated array instead. We assume we
can trust the tracker to send us a list of peers that terminates.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

Evil Mode 1:
I added an attack that whenever anyone tries to download from our peer, instead of 
loading the file they want, we instead upload to them a file we created called rick.txt.
This file contains the lyrics to Rick Astley's "Never Gonna Give You Up". When the file 
has finished uploading, instead of exiting, the peer then uses lseek() to go back to the
start of the file and continue writing. This is an attack as it will fill up the user's 
disk space and lock down their peer with an infinite read.

Evil Mode 2:

Evil Mode 3:
I try to grab files outside of the given directory by getting the connection, then sending a
GET request for /etc/passwd or some other important file. This is an attack as it allows
my peer to get data that I am not supposed to have access to.

Evil Mode 4:
I run a denial of service attack on the uploader by infinitely requesting downloads from them.
An unsecure peer will then run out of connections and hang infinitely. This is an attack as it
allows my peer to connect to any peer that has the file that I "want" and then proceed to 
crash it

Evil Mode 5: 
We just spin and send nothing.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
